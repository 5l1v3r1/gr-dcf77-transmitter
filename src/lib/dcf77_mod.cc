/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <dcf77_mod.h>
#include <gr_io_signature.h>
#include <math.h>

/*
 * Create a new instance of dcf77_mod and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
dcf77_mod_sptr dcf77_make_mod (long sample_rate) {
  return dcf77_mod_sptr (new dcf77_mod (sample_rate));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
dcf77_mod::dcf77_mod (long sample_rate) : gr_block ("mod",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (int)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float))) {

  this->sample_rate = sample_rate;
  state = STATE_AMPL_NO_MOD;
  hold_state_for_n_samples = 0;
}

/*
 * Our virtual destructor.
 */
dcf77_mod::~dcf77_mod () {
  // nothing else required in this example
}


void dcf77_mod::forecast(int noutput_items, gr_vector_int &inputs_required) {
  for (unsigned int i = 0; i < inputs_required.size(); i++)
    inputs_required[i] = 1 + noutput_items / sample_rate;
}

int dcf77_mod::general_work( int noutput_items,
			     gr_vector_int &ninput_items,
			     gr_vector_const_void_star &input_items,
			     gr_vector_void_star &output_items) {

  const int *in = (const int *) input_items[0];
  float *out = (float *) output_items[0];

  int i = 0;
  int curr_input_bit = 0;

  //printf("num of input values: %d\nnumber of output values: %d\n", ninput_items[0], noutput_items);
  
  /*
    if(ninput_items[0] != 0) {
    printf("%d\n", in[curr_input_bit]);
  }
  else {
    printf("no input bit\n");
  }
  */
  for (; i < noutput_items; i++){

    //printf("%d\n", i);

    if(hold_state_for_n_samples == 0) {
      state_change = true;
    }

    if(state_change) {
      //printf("state_change = true -- state == %d\n", state);
      // load bit
      if((state == STATE_AMPL_SEND_0_high) || 
	 (state == STATE_AMPL_SEND_1_high) ||
	 (state == STATE_AMPL_NO_MOD)) {
	
	switch(in[curr_input_bit]) { // what is the next bit value?
	case 0:
	  next_state = STATE_AMPL_SEND_0_low;
	  printf("0\n");
	  break;
	case 1:
	  next_state = STATE_AMPL_SEND_1_low;
	  printf("1\n");
	  break;
	default:
	  printf("2\n");
	  next_state = STATE_AMPL_NO_MOD;
	}
	//printf("next state is %d\n", next_state);
	curr_input_bit++;
      }

      state = next_state;
      switch(state) {
      case STATE_AMPL_SEND_0_low:
	hold_state_for_n_samples = sample_rate / 10;
	ampl = 0.25;
	next_state = STATE_AMPL_SEND_0_high;
	break;
      case STATE_AMPL_SEND_0_high:
	hold_state_for_n_samples = 9 * sample_rate / 10;
	ampl = 1;
	next_state = STATE_AMPL_SEND_1_low;
	break;
      case STATE_AMPL_SEND_1_low:
	hold_state_for_n_samples = sample_rate / 5;
	ampl = 0.25;
	next_state = STATE_AMPL_SEND_1_high;
	break;
      case STATE_AMPL_SEND_1_high:
	hold_state_for_n_samples = (sample_rate / 5) << 2;
	ampl = 1;
	next_state = STATE_AMPL_NO_MOD;
	break;
      case STATE_AMPL_NO_MOD:
	hold_state_for_n_samples = sample_rate;
	ampl = 1;
	next_state = STATE_AMPL_SEND_0_low;
	break;
      }
      printf("hold state for %ld samples\n", hold_state_for_n_samples);

      state_change = false;
      //printf("hold for %d\n", hold_state_for_n_samples);
    }

    out[i] =  ampl;

    hold_state_for_n_samples--;
  }


  // Tell runtime system how many input items we consumed on
  // each input stream.

  consume_each(curr_input_bit);

  // Tell runtime system how many output items we produced.
  return noutput_items;
}
