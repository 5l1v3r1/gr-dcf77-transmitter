/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <dcf77_clock.h>
#include <gr_io_signature.h>
#include <math.h>
#include <string.h>

/*
 * Create a new instance of dcf77_clock and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
dcf77_clock_sptr dcf77_make_clock (int hour, int min, int mday, int dow, 
				   int month, int year, int loops) {
 return dcf77_clock_sptr (new dcf77_clock(hour, min, mday, dow, month, year, loops));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 0;	// mininum number of input streams
static const int MAX_IN = 0;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
dcf77_clock::dcf77_clock(int hour, int min, int mday, int dow, 
			 int month, int year, int loops) : 
  gr_block ("clock",
	    gr_make_io_signature (MIN_IN, MAX_IN, 0),
	    gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof(int))) {
  
  this->hour  = hour;
  this->min   = min;
  this->mday   = mday;
  this->dow   = dow;
  this->month = month;
  this->year  = year;
  this->loops  = loops;
  
  bit_buf_pos = 0;

  loop_cnt = 0;
}

/*
* Our virtual destructor.
*/
dcf77_clock::~dcf77_clock () {
  // nothing else required in this example
}


void dcf77_clock::forecast(int noutput_items, gr_vector_int &inputs_required) {
  for (unsigned int i = 0; i < inputs_required.size(); i++)
    inputs_required[i] = 0;
}

int dcf77_clock::calc_bit_vector(int value, int * valency, int len, int * buf_ptr) {

  int check_bit = 0;

  //printf("\n");
  for(int i = 0; i < len; i++) {
    
    //printf("value = %d, check against %d\n", value, valency[len-i-1]);
    if(value - valency[len-i-1] >= 0) { 
      value -= valency[len-i-1]; 
      buf_ptr[len-i-1] = 1;
      
      check_bit = ((check_bit+1) %2);
    }
    else 
      buf_ptr[len-i-1] = 0;
    
    //printf("i = %d -> %d\n", i, buf_ptr[len-i-1]);
  }


  return check_bit;
}

void dcf77_clock::fill_bit_buffer() {

  int valency[] = {1, 2, 4, 8, 10, 20, 40, 80};
  
  int switch_dst = 0;
  int dst = 0; // 0 = winter time, 1 = summer time

  if( (hour == 2 && month == 3 && dow == 7 && mday + 7 > 31) ||
      (hour == 3 && month == 10 && dow == 7 && mday + 7 > 31) )
    switch_dst = 1;
  
  if((month > 3 && month < 10) ||
     (month == 3 && mday -dow + 7 >= 31) ||
     (month == 10 && mday -dow + 7 < 31) )
    dst = 1;

  bit_buf[0] = 0; // 0: always 0
  memset(&bit_buf[1], 0, sizeof(int) * 14); // 1-14: reserved/ unused
  bit_buf[15] = 0;  // 15: 0 = default antenna
  bit_buf[16] = switch_dst;  // 16: daylight saving time switch in the hour

  bit_buf[17] = dst ? 1 : 0;  // 17-18: 01 = winter, 10 = mesz
  bit_buf[18] = dst ? 0 : 1;

  bit_buf[19] = 0;  // 19: no leap second with next 59 sec
  bit_buf[20] = 1;  // 20: start bit for time block, always 1

  bit_buf[28] = calc_bit_vector(min, valency, 7, &bit_buf[21]);
  bit_buf[35] = calc_bit_vector(hour, valency, 6, &bit_buf[29]);

  int check_bit = 0;

  check_bit = calc_bit_vector(mday, valency, 6, &bit_buf[36]);
  check_bit += calc_bit_vector(dow, valency, 3, &bit_buf[42]);

  check_bit += calc_bit_vector(month, valency, 5, &bit_buf[45]);
  check_bit += calc_bit_vector(year, valency, 8, &bit_buf[50]);

  bit_buf[58] = check_bit % 2;
     bit_buf[59] = 2; // no amplitude change in the 59th second
  
     for(int i = 0; i < 60; i++)
       printf("%d ", bit_buf[i]);
     puts("\n");
}


#define isleapyear(year)\
  ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))

int dcf77_clock::general_work( int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items) {
  
  int *out = (int *) output_items[0];

  int day_in_month_std[] = {31, 28 ,31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  int day_in_month_leap[] = {31, 29 ,31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  
  if(loops && (loop_cnt == loops)) {
    puts("limit reached, ret -1\n");
    return -1;
  }

  for (int i = 0; i < noutput_items; i++) {

    if(bit_buf_pos == 60) {
      if(++loop_cnt == loops) return i;
      else bit_buf_pos = 0;
    }
    
    if(bit_buf_pos == 0) {
      this->fill_bit_buffer();

      if(++min == 60) {
	min = 0;
	if(++hour == 24) {
	  hour = 0;
	  dow = ++dow % 7;
	  if(++mday == (isleapyear(year) ? 
			day_in_month_leap[month] : 
			day_in_month_std[month])+ 1) {
	    mday = 1;
	    if(month++ > 12) {
	      month = 1;
	      year = ++year % 100;
	    }
	  }
	}
      }
    }
    
    out[i] =  bit_buf[bit_buf_pos++];
  }

  puts("\n");

  return noutput_items;
}
